import imp
import os
from migrate.versioning import api
from GraduateProject import db
from GraduateProject.config.config import Config

basedir = os.path.abspath(os.path.dirname(__file__))
config = Config()

SQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, 'db_repository')
#Used in first time
#if not os.path.exists(SQLALCHEMY_MIGRATE_REPO):
#	api.create(SQLALCHEMY_MIGRATE_REPO, 'database repository')
#	api.version_control(config.SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
#else:
#	api.version_control(config.SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO, 
#						api.version(SQLALCHEMY_MIGRATE_REPO))

v = api.db_version(config.SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
migration = SQLALCHEMY_MIGRATE_REPO + ('/versions/%03d_migration.py' % (v+1))
tmp_module = imp.new_module('old_model')
old_model = api.create_model(config.SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
exec(old_model, tmp_module.__dict__)
script = api.make_update_script_for_model(config.SQLALCHEMY_DATABASE_URI, 
											SQLALCHEMY_MIGRATE_REPO,
											tmp_module.meta, db.metadata)
f = open(migration, "wt")
f.write(script)
api.upgrade(config.SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
v = api.db_version(config.SQLALCHEMY_DATABASE_URI, SQLALCHEMY_MIGRATE_REPO)
print('New migration saved as ' + migration)
print('Current database version: ' +str(v))

